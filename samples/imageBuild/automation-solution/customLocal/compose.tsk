Write-Host "`nLoad the branch (REVISION) and container image from the manifest, placed here by package.tsk`n"
PROPLD manifest.txt

$id = $("${SOLUTION}_${REVISION}").ToLower()

$env:WORK_SPACE = Split-Path -parent $workspace
Write-host $env:WORK_SPACE

# Copy any artefacts needed into specific images here, alternative is to filter scripts in storeForLocal and just copy automation directory
VECOPY base.ps1 compose/test
VECOPY capabilities.ps1 compose/test

cd compose
..\imageBuild.ps1 ${id} ${BUILDNUMBER} ${testImage}
cd ..

$composePersist = "${env:TEMP}\${id}"
MAKDIR $composePersist
VECOPY compose\docker-compose.yml $composePersist
cd $composePersist

Write-Host "List containers current state`n"
docker ps

Write-Host "`nCleanup from previously test`n"
$env:TARGET_TAG = "${id}_taskslocal"
$env:TEST_TAG = "${id}_test"

docker-compose down --remove-orphans
docker-compose rm -f

Write-Host "Set the build number to use`n"
$env:TARGET_TAG = "${id}_taskslocal:${BUILDNUMBER}"
$env:TEST_TAG = "${id}_test:${BUILDNUMBER}"

docker-compose up -d target

Write-Host "Deploy to target`n"
$containerID = $(docker ps -aq --filter "ancestor=$env:TARGET_TAG")

# There is no usable output from the Microsoft IIS container, so this cannot be used until I build a custom one
# & $env:WORK_SPACE\TasksLocal\dockerLog.ps1 $containerID 'Application started.'

docker-compose up -d test

Write-Host "Execute tests (allow 5 minutes to complete)`n"
$containerID = $(docker ps -aq --filter "ancestor=$env:TEST_TAG")
& $env:WORK_SPACE\TasksLocal\dockerLog.ps1 $containerID 'Automated Test Execution completed successfully.' 300

Write-Host "`nTear down if not explicit variable to retain`n"
if ( $env:COMPOSE_KEEP ) { docker ps } else { docker-compose down; docker-compose rm -f }

& $env:WORK_SPACE\TasksLocal\dockerClean.ps1 ${id}_target ${BUILDNUMBER}
& $env:WORK_SPACE\TasksLocal\dockerClean.ps1 ${id}_test ${BUILDNUMBER}

cd $workspace

# echo "Only push from master, i.e. use Pull/Merge Request as gating mechanism"
# if ( $REVISION -eq 'master' ) { then echo $env:DOKERHUB_TOKEN | docker login --username cdaf --password-stdin }
# if ( $REVISION -eq 'master' ) { then docker tag ${TARGET_TAG} cdaf/terraform:${BUILDNUMBER} }
# if ( $REVISION -eq 'master' ) { then docker push cdaf/terraform:${BUILDNUMBER} }
# if ( $REVISION -eq 'master' ) { then docker tag ${TARGET_TAG} cdaf/terraform:${productVersion} }
# if ( $REVISION -eq 'master' ) { then docker push cdaf/terraform:${productVersion} }
# if ( $REVISION -eq 'master' ) { then docker tag ${TARGET_TAG} cdaf/terraform:latest }
# if ( $REVISION -eq 'master' ) { then docker push cdaf/terraform:latest }
