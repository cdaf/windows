solutionName=myproduct
# productName=My Product Name

# Custom Diagnostics on error
# CDAF_ERROR_DIAG=foreach ( $item in ( Get-WmiObject Win32_LogicalDisk )) { get-volume -DriveLetter ($item.DeviceID).split(":")[0] }

# containerBuild=& $AUTOMATIONROOT/processor/containerBuild.ps1 ${SOLUTION} ${BUILDNUMBER} ${REVISION}
# containerImage=cdaf/windows

artifactPrefix=0.0
# productVersion=0.0.0
# packageFeatures=minimal
# packageMethod=tarball

# imageBuild minimum configuration
# buildImage=cdaf/windows

# imageBuild integrated push to registry
# CDAF_REGISTRY_URL=${env:CI_REGISTRY}
# CDAF_REGISTRY_TAG=latest ${env:CI_REGISTRY}/linux/${env:SOLUTION}:$BUILDNUMBER
# CDAF_REGISTRY_USER=${env:CI_REGISTRY_USER}
# CDAF_REGISTRY_TOKEN=${env:CI_JOB_TOKEN}

# defaultBranch=master
# defaultEnvironment=windows

# gitRemoteURL=https://github.com/cdaf/${SOLUTION}.git
# gitUserNameEnvVar=${env:GIT_USER}
# gitUserPassEnvVar=${env:GIT_PASS}
# gitCustomCleanup=& $AUTOMATIONROOT/buildandpackage/clean.ps1

# processSequence=localTasks.ps1 remoteTasks.ps1 containerTasks.ps1

# containerDeploy minimum configuration
# runtimeImage=cdaf/windows
